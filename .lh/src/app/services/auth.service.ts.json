{
    "sourceFile": "src/app/services/auth.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1740261248302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740266238283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { Injectable } from '@angular/core';\r\n import { HttpClient } from '@angular/common/http';\r\n import { BehaviorSubject, Observable, tap } from 'rxjs';\r\n import { Router } from '@angular/router';\r\n+import { JwtService } from './jwt.service';\r\n \r\n // Define interfaces for type safety\r\n export interface User {\r\n   id: string;\r\n@@ -36,9 +37,10 @@\n   private isAuthenticated = new BehaviorSubject<boolean>(false);\r\n \r\n   constructor(\r\n     private http: HttpClient,\r\n-    private router: Router\r\n+    private router: Router,\r\n+    private jwtService: JwtService\r\n   ) {\r\n     this.loadStoredUser();\r\n   }\r\n \r\n@@ -82,12 +84,21 @@\n     localStorage.setItem(this.TOKEN_KEY, response.token);\r\n     localStorage.setItem(this.USER_KEY, JSON.stringify(response.user));\r\n     this.currentUserSubject.next(response.user);\r\n     this.isAuthenticated.next(true);\r\n+\r\n+    // Set auto logout timer\r\n+    const token = response.token;\r\n+    const expirationDate = this.jwtService.getTokenExpirationDate(token);\r\n+    if (expirationDate) {\r\n+      const expirationDuration = expirationDate.getTime() - new Date().getTime();\r\n+      this.jwtService.setLogoutTimer(expirationDuration);\r\n+    }\r\n   }\r\n \r\n   // User logout\r\n   logout(): void {\r\n+    this.jwtService.clearLogoutTimer();\r\n     localStorage.removeItem(this.TOKEN_KEY);\r\n     localStorage.removeItem(this.USER_KEY);\r\n     this.currentUserSubject.next(null);\r\n     this.isAuthenticated.next(false);\r\n@@ -107,5 +118,13 @@\n   // Get current user\r\n   getCurrentUser(): User | null {\r\n     return this.currentUserSubject.value;\r\n   }\r\n+\r\n+  // Auto logout\r\n+  autoLogout(): void {\r\n+    const token = this.getToken();\r\n+    if (token && this.jwtService.isTokenExpired(token)) {\r\n+      this.logout();\r\n+    }\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1740268030433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n import { Injectable } from '@angular/core';\r\n import { HttpClient } from '@angular/common/http';\r\n import { BehaviorSubject, Observable, tap } from 'rxjs';\r\n import { Router } from '@angular/router';\r\n-import { JwtService } from './jwt.service';\r\n \r\n // Define interfaces for type safety\r\n export interface User {\r\n   id: string;\r\n+  id: string;\r\n   email: string;\r\n   displayName?: string;\r\n   photoURL?: string;\r\n }\r\n"
                },
                {
                    "date": 1740268038141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     }\r\n   }\r\n \r\n   signup(data: SignupData): Observable<AuthResponse> {\r\n-    }\r\n+    return this.http.post<AuthResponse>(`${this.API_URL}/register`, data)\r\n   }\r\n \r\n   // User registration\r\n   signup(data: SignupData): Observable<AuthResponse> {\r\n"
                },
                {
                    "date": 1740270596419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,15 +7,15 @@\n // Define interfaces for type safety\r\n export interface User {\r\n   id: string;\r\n   email: string;\r\n+  displayName?: string;\r\n   photoURL?: string;\r\n }\r\n \r\n export interface AuthResponse {\r\n   user: User;\r\n   token: string;\r\n-}\r\n \r\n export interface SignupData {\r\n   firstName: string;\r\n   email: string;\r\n"
                }
            ],
            "date": 1740261248302,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\n// Define interfaces for type safety\r\nexport interface User {\r\n  id: string;\r\n  email: string;\r\n  displayName?: string;\r\n  photoURL?: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n  user: User;\r\n  token: string;\r\n  refreshToken?: string;\r\n}\r\n\r\nexport interface SignupData {\r\n  firstName: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly API_URL = 'http://your-api-url/api/auth';\r\n  private readonly TOKEN_KEY = 'auth_token';\r\n  private readonly USER_KEY = 'auth_user';\r\n  \r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n  private isAuthenticated = new BehaviorSubject<boolean>(false);\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router\r\n  ) {\r\n    this.loadStoredUser();\r\n  }\r\n\r\n  // Load stored user data on service initialization\r\n  private loadStoredUser(): void {\r\n    const storedUser = localStorage.getItem(this.USER_KEY);\r\n    const storedToken = localStorage.getItem(this.TOKEN_KEY);\r\n    \r\n    if (storedUser && storedToken) {\r\n      this.currentUserSubject.next(JSON.parse(storedUser));\r\n      this.isAuthenticated.next(true);\r\n    }\r\n  }\r\n\r\n  // User registration\r\n  signup(data: SignupData): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.API_URL}/register`, data)\r\n      .pipe(\r\n        tap(response => this.handleAuthentication(response))\r\n      );\r\n  }\r\n\r\n  // User login\r\n  login(email: string, password: string): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.API_URL}/login`, { email, password })\r\n      .pipe(\r\n        tap(response => this.handleAuthentication(response))\r\n      );\r\n  }\r\n\r\n  // Google authentication\r\n  googleLogin(): Observable<AuthResponse> {\r\n    return this.http.get<AuthResponse>(`${this.API_URL}/google`)\r\n      .pipe(\r\n        tap(response => this.handleAuthentication(response))\r\n      );\r\n  }\r\n\r\n  // Handle successful authentication\r\n  private handleAuthentication(response: AuthResponse): void {\r\n    localStorage.setItem(this.TOKEN_KEY, response.token);\r\n    localStorage.setItem(this.USER_KEY, JSON.stringify(response.user));\r\n    this.currentUserSubject.next(response.user);\r\n    this.isAuthenticated.next(true);\r\n  }\r\n\r\n  // User logout\r\n  logout(): void {\r\n    localStorage.removeItem(this.TOKEN_KEY);\r\n    localStorage.removeItem(this.USER_KEY);\r\n    this.currentUserSubject.next(null);\r\n    this.isAuthenticated.next(false);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  // Get authentication token\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.TOKEN_KEY);\r\n  }\r\n\r\n  // Check if user is logged in\r\n  isLoggedIn(): boolean {\r\n    return this.isAuthenticated.value;\r\n  }\r\n\r\n  // Get current user\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n}\r\n"
        }
    ]
}