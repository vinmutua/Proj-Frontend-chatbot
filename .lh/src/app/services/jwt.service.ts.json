{
    "sourceFile": "src/app/services/jwt.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740266217311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740266217311,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JwtService {\r\n  private tokenTimer: any;\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  setLogoutTimer(expirationDuration: number): void {\r\n    this.tokenTimer = setTimeout(() => {\r\n      this.authService.logout();\r\n    }, expirationDuration);\r\n  }\r\n\r\n  clearLogoutTimer(): void {\r\n    if (this.tokenTimer) {\r\n      clearTimeout(this.tokenTimer);\r\n    }\r\n  }\r\n\r\n  getTokenExpirationDate(token: string): Date | null {\r\n    try {\r\n      const decoded = JSON.parse(atob(token.split('.')[1]));\r\n      if (decoded.exp === undefined) return null;\r\n      \r\n      const date = new Date(0);\r\n      date.setUTCSeconds(decoded.exp);\r\n      return date;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  isTokenExpired(token: string): boolean {\r\n    const expirationDate = this.getTokenExpirationDate(token);\r\n    if (!expirationDate) return true;\r\n    return expirationDate.valueOf() <= new Date().valueOf();\r\n  }\r\n}\r\n"
        }
    ]
}